{
	"info": {
		"_postman_id": "ea34e6f4-3cf2-4a9f-9ced-74bed465705d",
		"name": "DZ_Postman_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "method_first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус код 200!!!\", function ()",
							"{",
							"    pm.response.to.have.status(200)",
							"});",
							"",
							"pm.test (\"С сервера приходит правельный ответ\", function () {",
							"    pm.expect(pm.response.text()).to.include",
							"    (\"This is the first responce from server!\")",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url_server_72}}/first",
					"host": [
						"{{url_server_72}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "method_user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200",
							"pm.test(\"Status code is 200!\", function () {",
							"    pm.response.to.have.status (200);",
							"});",
							"// Спарсить response body в json.",
							"let jsonData = pm.response.json();",
							"",
							"// Проверить, что name в ответе равно name s request ",
							"pm.test(\"Test name\", function (){",
							"  ",
							"    pm.expect(jsonData.name).to.eql(\"Dima\");",
							"});",
							"",
							"// Проверить, что age в ответе равно age s request",
							"pm.test(\"Test age\", function () {",
							"    pm.expect (parseInt(jsonData.age)).to.eql(11);",
							"});",
							"// Проверить, что salary в ответе равно salary s request ",
							"pm.test(\"Test salary\", function(){",
							"    pm.expect(jsonData.salary).to.eql(1000);",
							"})",
							"// Спарсить request.",
							"let requestData = request.data;",
							"",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test (\"Test name request\", function (){",
							"pm.expect(jsonData.name).to.eql(requestData.name);  ",
							"});",
							"",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test (\"Test age request\", function(){",
							"   pm.expect(jsonData.age).to.eql(requestData.age);",
							"});",
							"",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Test salary request\", function(){",
							"    pm.expect(jsonData.salary).to.eql(+requestData.salary);",
							"})",
							"",
							"// Вывести в консоль параметр family из response.",
							"console.log(jsonData.family);",
							"",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"pm.test(\"Test corrcet salary\", function(){",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(requestData.salary*4)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Dima",
							"type": "text"
						},
						{
							"key": "age",
							"value": "11",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url_server_72}}/user_info_3",
					"host": [
						"{{url_server_72}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "method_object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200",
							"pm.test(\"Status cod is 200!\", function (){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Спарсить response body в json.",
							"let jsonData = pm.response.json();",
							"",
							"// Спарсить request.",
							"let requestData = pm.request.url.query.toObject();",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Test name in response\", function (){",
							"    pm.expect(requestData.name).to.eql(jsonData.name);",
							"})",
							"",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Test age in response\", function(){",
							"    pm.expect(pm.request.url.query.toObject().age).to.eql(pm.response.json().age);",
							"})",
							"",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Test salary in response to string\", function(){",
							"    pm.expect(pm.request.url.query.toObject().salary).to.eql(pm.response.json().salary.toString());",
							"})",
							"pm.test(\"Test salary in response to int\", function(){",
							"    pm.expect(parseInt(pm.request.url.query.toObject().salary)).to.eql(pm.response.json().salary);",
							"})",
							"",
							"// Вывести в консоль параметр family из response.",
							"console.log(pm.response.json().family);",
							"",
							"// Проверить, что у параметра dog есть параметры name.",
							"pm.test(\"Test. Dog has param name.\", function(){",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");",
							"})",
							"",
							"// Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"Test. Dog has param age.\", function(){",
							"    //pm.expect(pm.response.json().family.pets.dog.age == \"age\");",
							"     pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");",
							"})",
							"",
							"// Проверить, что параметр name имеет значение Luky.",
							"pm.test(\"Test. Name is Luky.\", function(){",
							"// 1",
							"pm.expect(pm.response.json().family.pets.dog.name).to.eql(\"Luky\");",
							"// 2",
							"pm.expect(pm.response.json().family.pets.dog.name).to.include(\"Luky\");",
							"})",
							"",
							"// Проверить, что параметр age имеет значение 4.",
							"pm.test(\"Test. Age has param 4.\", function(){",
							"    pm.expect(pm.response.json().family.pets.dog.age).to.eql(4);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url_server_72}}/object_info_3?name=Vasya&age=34&salary=10000",
					"host": [
						"{{url_server_72}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Vasya"
						},
						{
							"key": "age",
							"value": "34"
						},
						{
							"key": "salary",
							"value": "10000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "method_object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200!!\", function(){",
							"    pm.response.to.have.status(200)",
							"})",
							"// 3. Спарсить response body в json.",
							"let jsonData = pm.response.json();",
							"// 4. Спарсить request.",
							"let requestData = pm.request.url.query.toObject();",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Test. Name in request eql to response.\", function(){",
							"    pm.expect(jsonData.name).to.eql(requestData.name);",
							"})",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"pm.test(\"Test. Age in request eql to response.\",function(){",
							"pm.expect(jsonData.age).to.eql(parseInt(requestData.age));",
							"})",
							"// 7. Вывести в консоль параметр salary из request.",
							"console.log(requestData.salary);",
							"// 8. Вывести в консоль параметр salary из response.",
							"console.log(jsonData.salary);",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.",
							"console.log(jsonData.salary[0]);",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"console.log(jsonData.salary[1]);",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"console.log(pm.response.json().salary[2]);",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"Test. 0 element in response salary eql to request salary \", function(){",
							"    pm.expect(jsonData.salary[0]).to.eql(+requestData.salary);",
							"})",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"Test. 1 element in response salary eql to request salary*2\", function(){",
							"    pm.expect(pm.response.json().salary[1]).to.eql((pm.request.url.query.toObject().salary*2).toString())",
							"})",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test(\"Test. 2 element in response salary eql to request salary*3\", function(){",
							"    pm.expect(jsonData.salary[2]).to.eql((requestData.salary*3).toString());",
							"})",
							"// 15. Создать в окружении переменную name",
							"    // New -> Environment -> Variable -> указать переменную name",
							"// 16. Создать в окружении переменную age",
							"    // // New -> Environment -> Variable -> указать переменную age",
							"// 17. Создать в окружении переменную salary",
							"    // New -> Environment -> Variable -> указать переменную salary",
							"// 18. Передать в окружение переменную name",
							"pm.environment.set(\"name\", jsonData.name);",
							"// 19. Передать в окружение переменную age",
							"pm.environment.set(\"age\", jsonData.age);",
							"// 20. Передать в окружение переменную salary",
							"pm.environment.set(\"salary\", jsonData.salary[0]);",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"let salary = jsonData.salary;",
							"for(let i = 0; i < salary.length; i++){",
							"    console.log(\"Test:\" + salary[i]);",
							"}",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url_server_72}}/object_info_4?name=Sasha&age=27&salary=15000",
					"host": [
						"{{url_server_72}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Sasha"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "15000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "method_user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request",
							"    // {{salary}}",
							"// 2. Вставить параметр age из окружения в age",
							"    // {{age}}",
							"// 3. Вставить параметр name из окружения в name",
							"    // {{name}}",
							"// 4. Отправить запрос.",
							"//  done",
							"// 5. Статус код 200",
							"pm.test(\"Status code is 200 !!\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"// 6. Спарсить response body в json.",
							"let jsonData = pm.response.json();",
							"// 7. Спарсить request.",
							"let requestData = request.data;",
							"// 8. Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"Test. Response has parametr start_qa_salary\", function(){",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");",
							"});",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"Test. Response has parametr qa_salary_after_6_months\", function(){",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");",
							"});",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"Test. Response has parametr qa_salary_after_12_months\", function(){",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");",
							"});",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"Test. Response has parametr qa_salary_after_1.5_year\", function(){",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\")",
							"});",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"Test. Response has parametr qa_salary_after_3.5_years\", function(){",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\")",
							"});",
							"// 13. Проверить, что json response имеет параметр person",
							"pm.test(\"Test. Response has parametr person\", function(){",
							"    pm.expect(jsonData).to.have.property(\"person\")",
							"});",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"pm.test(\"Test. start_qa_salary in response eql salary in request\", function(){",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+requestData.salary);",
							"});",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"Test. qa_salary_after_6_months in response eql salary in request * 2\", function(){",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(requestData.salary*2);",
							"});",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"Test. qa_salary_after_12_months in response eql salary in request * 2.7\", function(){",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(requestData.salary*2.7);",
							"});",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test(\"Test. qa_salary_after_1.5_year in response eql salary in request * 3.3\", function(){",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(requestData.salary*3.3);",
							"});",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test(\"Test. qa_salary_after_3.5_years in response eql salary in request * 3.8\", function(){",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(requestData.salary*3.8);",
							"})",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test(\"Test. 1st elementin response equal to salary in request \", function(){",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(parseInt(requestData.salary));",
							"})",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"pm.test(\"Test. u_age in response eql to age in request\", function(){",
							"    pm.expect(jsonData.person.u_age).to.eql(+requestData.age);",
							"})",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test(\"Test. u_salary_5_years in respons eql to salary*4.2 in request\", function(){",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(requestData.salary*4.2);",
							"})",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"let elements = jsonData.person;",
							"for(let key in elements){",
							"    console.log(elements[key]);",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url_server_72}}/user_info_2",
					"host": [
						"{{url_server_72}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}